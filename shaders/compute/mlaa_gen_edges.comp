#version 460

layout (local_size_x = 1, local_size_y = 1) in;

layout (set = 0, binding = 0, rgba8) uniform image2D colorTex;
layout (set = 0, binding = 2, rg8) uniform image2D edgeTex;

#define THRESHOLD 0.08

float luminance(vec3 color)
{
    return 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;
}

void main()
{
    const vec2 resolution = vec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);
    const ivec2 currPixel = ivec2(gl_GlobalInvocationID.xy);

    float lum     = luminance(imageLoad(colorTex, currPixel).rgb);
    float lumLeft = luminance(imageLoad(colorTex, currPixel - ivec2(1, 0)).rgb);
    float lumTop  = luminance(imageLoad(colorTex, currPixel + ivec2(0, 1)).rgb);

    vec2 delta = abs(vec2(lum, lum) - vec2(lumLeft, lumTop));
    vec2 edges = step(THRESHOLD, delta);

    // The information stored in the texture is binary - either an edgel
    // exists or it doesn't
    imageStore(edgeTex, ivec2(gl_GlobalInvocationID.xy), vec4(edges, 0, 0));
}
