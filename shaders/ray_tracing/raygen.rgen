#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_NV_ray_tracing : require

// Until RayTracingProvisionalKHR is replaced by RayTracingKHR
#define executeCallableEXT executeCallableNV
#define traceRayEXT traceNV

layout (set = 0, binding = 0) uniform accelerationStructureEXT TLAS;
layout (set = 1, binding = 0, rgba8) uniform image2D outputImage;

layout (location = 0) rayPayloadEXT vec4 color;
layout (location = 0) callableDataEXT vec4 callColor;

layout (push_constant) uniform PushConstants
{
    mat4 viewMatrix;
    mat4 projMatrix;
};

void main()
{
    const mat4 viewProjInverse = inverse(projMatrix * viewMatrix);

    const vec2 normalPixelCoord = (vec2(gl_LaunchIDEXT.xy) / vec2(gl_LaunchSizeEXT.xy)) * 2.0 - 1.0;
    const vec4 pixelViewSpace = inverse(projMatrix) * vec4(normalPixelCoord, 1.0, 1.0);
    vec4 pixelWorldSpace = inverse(viewMatrix) * pixelViewSpace;
    pixelWorldSpace /= pixelWorldSpace.w;

    vec4 cameraPos = inverse(viewMatrix) * vec4(0, 0, 0, 1);
    vec3 rayOrigin = cameraPos.xyz;
    vec3 rayDirection = normalize(pixelWorldSpace.xyz - rayOrigin);
    float minT = 0.001;
    float maxT = 1000.0;

    color = vec4(1, 1, 1, 1);

    traceRayEXT(
        TLAS,         // top-level acceleration structure
        0,            // ray flags
        0xff,         // cull mask
        0,            // sbt record offset
        0,            // sbt record stride
        1,            // miss index
        rayOrigin,    // ray origin
        minT,         // ray min range
        rayDirection, // ray direction
        maxT,         // ray max range
        0             // payload location
    );

    callColor = vec4(1, 1, 1, 1);
    executeCallableNV(0, 0);

    imageStore(outputImage, ivec2(gl_LaunchIDEXT.xy), color);
}
