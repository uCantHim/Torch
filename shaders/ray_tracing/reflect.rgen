#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : require

#include "material.glsl"

layout (set = 0, binding = 0) uniform accelerationStructureEXT TLAS;
layout (set = 1, binding = 0, rgba8) writeonly uniform image2D outputImage;

layout (set = 2, binding = 0, rgba16f) uniform restrict readonly image2D gBufferNormal;
layout (set = 2, binding = 1, rgba8)   uniform restrict readonly image2D gBufferAlbedo;
layout (set = 2, binding = 2, rgba8)   uniform restrict readonly image2D gBufferMaterial;
layout (set = 2, binding = 3) uniform sampler2D gBufferDepth;

layout (set = 3, binding = 0, std430) restrict readonly buffer Materials
{
    Material materials[];
};

layout (set = 6, binding = 0) restrict readonly uniform CameraData
{
    mat4 viewMatrix;
    mat4 projMatrix;
    mat4 inverseViewMatrix;
    mat4 inverseProjMatrix;
};

layout (location = 0) rayPayloadEXT vec3 color;

vec3 worldPosFromDepth(vec2 normalPixelCoord, float depth)
{
    normalPixelCoord.y = 1.0 - normalPixelCoord.y;

    const vec4 clipSpace = vec4(normalPixelCoord * 2.0 - 1.0, depth, 1.0);
    const vec4 viewSpace = inverseProjMatrix * clipSpace;
    const vec4 worldSpace = inverseViewMatrix * (viewSpace / viewSpace.w);
    // or: worldSpace /= worldSpace.w;

    return worldSpace.xyz;
}

void main()
{
    const ivec2 texelCoord = ivec2(gl_LaunchIDEXT.xy);
    const vec2 normalPixelCoord = (vec2(gl_LaunchIDEXT.xy) / vec2(gl_LaunchSizeEXT.xy));

    // Use roughness as inverse reflectivity
    float reflectivity = 1.0f - imageLoad(gBufferMaterial, texelCoord)[1];
    if (reflectivity <= 0.0f)
    {
        imageStore(outputImage, ivec2(gl_LaunchIDEXT.xy), vec4(0.0f));
        return;
    }

    const float depth = texture(gBufferDepth, normalPixelCoord).r;
    const vec3 worldPos = worldPosFromDepth(normalPixelCoord, depth);
    const vec3 worldNormal = imageLoad(gBufferNormal, texelCoord).xyz;

    vec4 cameraPos = inverse(viewMatrix) * vec4(0, 0, 0, 1);
    vec3 rayOrigin = worldPos;
    vec3 cameraRay = normalize(worldPos - cameraPos.xyz);
    vec3 rayDirection = reflect(cameraRay, worldNormal);
    float minT = 0.003 + 0.01 * (1.0 - dot(rayDirection, -cameraRay));
    float maxT = 10000.0;

    traceRayEXT(
        TLAS,         // top-level acceleration structure
        0,            // ray flags
        0xff,         // cull mask
        0,            // sbt record offset
        0,            // sbt record stride
        0,            // miss index
        rayOrigin,    // ray origin
        minT,         // ray min range
        rayDirection, // ray direction
        maxT,         // ray max range
        0             // payload location
    );

    imageStore(outputImage, ivec2(gl_LaunchIDEXT.xy), vec4(color, reflectivity));
}
