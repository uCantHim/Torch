#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_nonuniform_qualifier : require

#define ASSET_DESCRIPTOR_SET_BINDING 1
#include "asset_registry_descriptor.glsl"

#define SHADOW_DESCRIPTOR_SET_BINDING 4
#define LIGHT_DESCRIPTOR_SET 3
#define LIGHT_DESCRIPTOR_BINDING 0
#include "lighting.glsl"

#define MAX_FRAGS 10

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout (set = 0, binding = 0, std140) restrict uniform CameraBuffer
{
    mat4 viewMatrix;
    mat4 projMatrix;
    mat4 inverseViewMatrix;
    mat4 inverseProjMatrix;
} camera;

layout (set = 0, binding = 1) restrict readonly uniform GlobalDataBuffer
{
    vec2 mousePos;
    vec2 resolution;
} global;

layout (set = 2, binding = 0, rgba16f) uniform restrict readonly image2D inNormal;
layout (set = 2, binding = 1, r32ui)   uniform restrict readonly uimage2D inAlbedo;
layout (set = 2, binding = 2, r32ui)   uniform restrict readonly uimage2D inMaterial;
layout (set = 2, binding = 3) uniform sampler2D inDepth;
layout (set = 2, binding = 7, rgba8)  uniform restrict writeonly image2D swapchainImage;

layout (set = 2, binding = 4, r32ui) uniform uimage2D fragmentListHeadPointer;
layout (set = 2, binding = 6) restrict buffer FragmentList
{
    /**
     * 0: A packed color
     * 1: Fragment depth value
     * 2: Next-pointer
     */
    uvec4 fragmentList[];
};


/////////////////////
//      Main       //
/////////////////////

vec4 worldPosFromDepth(ivec2 coords, float depth);
vec3 blendTransparent(ivec2 coords, vec3 opaqueColor);

void main()
{
    ivec2 coords = ivec2(gl_GlobalInvocationID.xy);
    coords = min(coords, ivec2(global.resolution));

    const uint matIndex = imageLoad(inMaterial, coords).r;
    vec3 color = unpackUnorm4x8(imageLoad(inAlbedo, coords).r).xyz;

    color = calcLighting(
        color,
        worldPosFromDepth(coords, texelFetch(inDepth, coords, 0).r).xyz,
        normalize(imageLoad(inNormal, coords).xyz),
        camera.inverseViewMatrix[3].xyz,
        matIndex
    );

    color = blendTransparent(coords, color);

    imageStore(swapchainImage, coords, vec4(color, 1.0));
}


vec4 worldPosFromDepth(ivec2 coords, float depth)
{
    vec2 fc = coords;
#ifdef TRC_FLIP_Y_AXIS
    fc.y = global.resolution.y - fc.y;  // Viewport height inversion
#endif

    const vec4 clipSpace = vec4(fc / global.resolution * 2.0 - 1.0, depth, 1.0);
    const vec4 viewSpace = camera.inverseProjMatrix * clipSpace;
    const vec4 worldSpace = camera.inverseViewMatrix * (viewSpace / viewSpace.w);

    return worldSpace;
}


vec3 blendTransparent(ivec2 coords, vec3 opaqueColor)
{
    // Exchange doesn't seem to have any difference in performance to imageLoad().
    // Use exchange to reset head pointer to default value.
    uint fragListIndex = imageAtomicExchange(fragmentListHeadPointer, coords, ~0u);

    // Build fragment list
    uvec4 fragments[MAX_FRAGS];
    int numFragments = 0;
    while (numFragments < MAX_FRAGS && fragListIndex != ~0u)
    {
        fragments[numFragments] = fragmentList[fragListIndex];
        numFragments++;
        fragListIndex = fragmentList[fragListIndex].z;
    }

    // Sort fragment list
    for (int i = numFragments - 1; i > 0; i--)
    {
        for (int j = 0; j < i; j++)
        {
            float depth1 = uintBitsToFloat(fragments[j].y);
            float depth2 = uintBitsToFloat(fragments[j + 1].y);
            if (depth1 > depth2)
            {
                uvec4 temp = fragments[j];
                fragments[j] = fragments[j + 1];
                fragments[j + 1] = temp;
            }
        }
    }

    // Blend fragments
    for (int i = numFragments - 1; i >= 0; i--)
    {
        vec4 color = unpackUnorm4x8(fragments[i].x);
        opaqueColor = opaqueColor * (1.0 - color.a) + color.rgb * color.a;
    }

    return opaqueColor;
}

